import {
  require_react
} from "./chunk-BQYK6RGN.js";
import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/react-oauth2-code-pkce/dist/Hooks.js
var require_Hooks = __commonJS({
  "node_modules/react-oauth2-code-pkce/dist/Hooks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = require_react();
    function useBrowserStorage(key, initialValue, type) {
      const storage = type === "session" ? sessionStorage : localStorage;
      const [storedValue, setStoredValue] = (0, react_1.useState)(() => {
        const item = storage.getItem(key);
        try {
          return item ? JSON.parse(item) : initialValue;
        } catch (error) {
          console.warn(`Failed to parse stored value for '${key}'.
Continuing with default value.`);
          return initialValue;
        }
      });
      const setValue = (value) => {
        if (value === void 0) {
          setStoredValue(value);
          storage.removeItem(key);
          return;
        }
        try {
          const valueToStore = value instanceof Function ? value(storedValue) : value;
          setStoredValue(valueToStore);
          storage.setItem(key, JSON.stringify(valueToStore));
        } catch (error) {
          console.error(`Failed to store value '${value}' for key '${key}'`);
        }
      };
      (0, react_1.useEffect)(() => {
        const storageEventHandler = (event) => {
          var _a;
          if (event.storageArea === storage && event.key === key) {
            if (event.newValue === null) {
              setStoredValue(void 0);
            } else {
              try {
                setStoredValue(JSON.parse((_a = event.newValue) !== null && _a !== void 0 ? _a : ""));
              } catch (error) {
                console.warn(`Failed to handle storageEvent's newValue='${event.newValue}' for key '${key}'`);
              }
            }
          }
        };
        window.addEventListener("storage", storageEventHandler, false);
        return () => window.removeEventListener("storage", storageEventHandler, false);
      });
      return [storedValue, setValue];
    }
    exports.default = useBrowserStorage;
  }
});

// node_modules/react-oauth2-code-pkce/dist/authConfig.js
var require_authConfig = __commonJS({
  "node_modules/react-oauth2-code-pkce/dist/authConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createInternalConfig = createInternalConfig;
    exports.validateConfig = validateConfig;
    function stringIsUnset(value) {
      const unset = ["", void 0, null];
      return unset.includes(value);
    }
    function createInternalConfig(passedConfig) {
      const { autoLogin = true, clearURL = true, decodeToken = true, scope = void 0, preLogin = () => null, postLogin = () => null, loginMethod = "redirect", onRefreshTokenExpire = void 0, storage = "local", storageKeyPrefix = "ROCP_", refreshWithScope = true, refreshTokenExpiryStrategy = "renewable", tokenRequestCredentials = "same-origin" } = passedConfig;
      const config = Object.assign(Object.assign({}, passedConfig), { autoLogin, clearURL, decodeToken, scope, preLogin, postLogin, loginMethod, onRefreshTokenExpire, storage, storageKeyPrefix, refreshWithScope, refreshTokenExpiryStrategy, tokenRequestCredentials });
      validateConfig(config);
      return config;
    }
    function validateConfig(config) {
      if (stringIsUnset(config === null || config === void 0 ? void 0 : config.clientId))
        throw Error("'clientId' must be set in the 'AuthConfig' object passed to 'react-oauth2-code-pkce' AuthProvider");
      if (stringIsUnset(config === null || config === void 0 ? void 0 : config.authorizationEndpoint))
        throw Error("'authorizationEndpoint' must be set in the 'AuthConfig' object passed to 'react-oauth2-code-pkce' AuthProvider");
      if (stringIsUnset(config === null || config === void 0 ? void 0 : config.tokenEndpoint))
        throw Error("'tokenEndpoint' must be set in the 'AuthConfig' object passed to 'react-oauth2-code-pkce' AuthProvider");
      if (stringIsUnset(config === null || config === void 0 ? void 0 : config.redirectUri))
        throw Error("'redirectUri' must be set in the 'AuthConfig' object passed to 'react-oauth2-code-pkce' AuthProvider");
      if (!["session", "local"].includes(config.storage))
        throw Error("'storage' must be one of ('session', 'local')");
      if (config === null || config === void 0 ? void 0 : config.extraAuthParams)
        console.warn("The 'extraAuthParams' configuration parameter will be deprecated. You should use 'extraTokenParameters' instead.");
      if ((config === null || config === void 0 ? void 0 : config.extraAuthParams) && (config === null || config === void 0 ? void 0 : config.extraTokenParameters))
        console.warn("Using both 'extraAuthParams' and 'extraTokenParameters' is not recommended. They do the same thing, and you should only use 'extraTokenParameters'");
    }
  }
});

// node_modules/react-oauth2-code-pkce/dist/errors.js
var require_errors = __commonJS({
  "node_modules/react-oauth2-code-pkce/dist/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchError = void 0;
    var FetchError = class extends Error {
      constructor(status, statusText, message) {
        super(message);
        this.name = "FetchError";
        this.status = status;
        this.statusText = statusText;
      }
    };
    exports.FetchError = FetchError;
  }
});

// node_modules/react-oauth2-code-pkce/dist/httpUtils.js
var require_httpUtils = __commonJS({
  "node_modules/react-oauth2-code-pkce/dist/httpUtils.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.postWithXForm = postWithXForm;
    var errors_1 = require_errors();
    function buildUrlEncodedRequest(request) {
      let queryString = "";
      for (const [key, value] of Object.entries(request)) {
        queryString += `${queryString ? "&" : ""}${key}=${encodeURIComponent(value)}`;
      }
      return queryString;
    }
    function postWithXForm(_a) {
      return __awaiter(this, arguments, void 0, function* ({ url, request, credentials }) {
        return fetch(url, {
          method: "POST",
          body: buildUrlEncodedRequest(request),
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          credentials
        }).then((response) => __awaiter(this, void 0, void 0, function* () {
          if (!response.ok) {
            const responseBody = yield response.text();
            throw new errors_1.FetchError(response.status, response.statusText, responseBody);
          }
          return response;
        }));
      });
    }
  }
});

// node_modules/react-oauth2-code-pkce/dist/pkceUtils.js
var require_pkceUtils = __commonJS({
  "node_modules/react-oauth2-code-pkce/dist/pkceUtils.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRandomInteger = getRandomInteger;
    exports.generateRandomString = generateRandomString;
    exports.generateCodeChallenge = generateCodeChallenge;
    function getRandomInteger(range) {
      const max_range = 256;
      const byteArray = new Uint8Array(1);
      window.crypto.getRandomValues(byteArray);
      if (byteArray[0] >= Math.floor(max_range / range) * range)
        return getRandomInteger(range);
      return byteArray[0] % range;
    }
    function generateRandomString(length) {
      let text = "";
      const possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      for (let i = 0; i < length; i++) {
        text += possible.charAt(getRandomInteger(possible.length - 1));
      }
      return text;
    }
    function generateCodeChallenge(codeVerifier) {
      return __awaiter(this, void 0, void 0, function* () {
        var _a;
        if (!((_a = window.crypto.subtle) === null || _a === void 0 ? void 0 : _a.digest)) {
          throw new Error("The context/environment is not secure, and does not support the 'crypto.subtle' module. See: https://developer.mozilla.org/en-US/docs/Web/API/Crypto/subtle for details");
        }
        const encoder = new TextEncoder();
        const bytes = encoder.encode(codeVerifier);
        const hash = yield window.crypto.subtle.digest("SHA-256", bytes);
        const hashString = String.fromCharCode(...new Uint8Array(hash));
        const base64 = btoa(hashString);
        return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
      });
    }
  }
});

// node_modules/react-oauth2-code-pkce/dist/popupUtils.js
var require_popupUtils = __commonJS({
  "node_modules/react-oauth2-code-pkce/dist/popupUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calculatePopupPosition = calculatePopupPosition;
    function calculatePopupPosition(popupWidth = 600, popupHeight = 600) {
      const screenLeft = window.screenLeft;
      const screenTop = window.screenTop;
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;
      const defaultLeft = screenLeft + (screenWidth - popupWidth) / 2;
      const defaultTop = screenTop + (screenHeight - popupHeight) / 2;
      const maxLeft = screenLeft + (screenWidth - popupWidth);
      const maxTop = screenTop + (screenHeight - popupHeight);
      return {
        width: Math.min(popupWidth, screenWidth),
        height: Math.min(popupHeight, screenHeight),
        left: Math.max(0, Math.min(defaultLeft, maxLeft)),
        top: Math.max(0, Math.min(defaultTop, maxTop))
      };
    }
  }
});

// node_modules/react-oauth2-code-pkce/dist/authentication.js
var require_authentication = __commonJS({
  "node_modules/react-oauth2-code-pkce/dist/authentication.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fetchWithRefreshToken = exports.fetchTokens = void 0;
    exports.redirectToLogin = redirectToLogin;
    exports.redirectToLogout = redirectToLogout;
    exports.validateState = validateState;
    var httpUtils_1 = require_httpUtils();
    var pkceUtils_1 = require_pkceUtils();
    var popupUtils_1 = require_popupUtils();
    var codeVerifierStorageKey = "PKCE_code_verifier";
    var stateStorageKey = "ROCP_auth_state";
    function redirectToLogin(config_1, customState_1, additionalParameters_1) {
      return __awaiter(this, arguments, void 0, function* (config, customState, additionalParameters, method = "redirect") {
        const storage = config.storage === "session" ? sessionStorage : localStorage;
        const navigationMethod = method === "replace" ? "replace" : "assign";
        const codeVerifier = (0, pkceUtils_1.generateRandomString)(96);
        storage.setItem(codeVerifierStorageKey, codeVerifier);
        return (0, pkceUtils_1.generateCodeChallenge)(codeVerifier).then((codeChallenge) => {
          const params = new URLSearchParams(Object.assign(Object.assign({ response_type: "code", client_id: config.clientId, redirect_uri: config.redirectUri, code_challenge: codeChallenge, code_challenge_method: "S256" }, config.extraAuthParameters), additionalParameters));
          if (config.scope !== void 0 && !params.has("scope")) {
            params.append("scope", config.scope);
          }
          storage.removeItem(stateStorageKey);
          const state = customState !== null && customState !== void 0 ? customState : config.state;
          if (state) {
            storage.setItem(stateStorageKey, state);
            params.append("state", state);
          }
          const loginUrl = `${config.authorizationEndpoint}?${params.toString()}`;
          if (config === null || config === void 0 ? void 0 : config.preLogin)
            config.preLogin();
          if (method === "popup") {
            const { width, height, left, top } = (0, popupUtils_1.calculatePopupPosition)(600, 600);
            const handle = window.open(loginUrl, "loginPopup", `width=${width},height=${height},top=${top},left=${left}`);
            if (handle)
              return;
            console.warn("Popup blocked. Redirecting to login page. Disable popup blocker to use popup login.");
          }
          window.location[navigationMethod](loginUrl);
        });
      });
    }
    function isTokenResponse(body) {
      return body.access_token !== void 0;
    }
    function postTokenRequest(tokenEndpoint, tokenRequest, credentials) {
      return (0, httpUtils_1.postWithXForm)({ url: tokenEndpoint, request: tokenRequest, credentials }).then((response) => {
        return response.json().then((body) => {
          if (isTokenResponse(body)) {
            return body;
          }
          throw Error(JSON.stringify(body));
        });
      });
    }
    var fetchTokens = (config) => {
      const storage = config.storage === "session" ? sessionStorage : localStorage;
      const urlParams = new URLSearchParams(window.location.search);
      const authCode = urlParams.get("code");
      const codeVerifier = storage.getItem(codeVerifierStorageKey);
      if (!authCode) {
        throw Error("Parameter 'code' not found in URL. \nHas authentication taken place?");
      }
      if (!codeVerifier) {
        throw Error("Can't get tokens without the CodeVerifier. \nHas authentication taken place?");
      }
      const tokenRequest = Object.assign(Object.assign({ grant_type: "authorization_code", code: authCode, client_id: config.clientId, redirect_uri: config.redirectUri, code_verifier: codeVerifier }, config.extraTokenParameters), config.extraAuthParams);
      return postTokenRequest(config.tokenEndpoint, tokenRequest, config.tokenRequestCredentials);
    };
    exports.fetchTokens = fetchTokens;
    var fetchWithRefreshToken = (props) => {
      const { config, refreshToken } = props;
      const refreshRequest = Object.assign({ grant_type: "refresh_token", refresh_token: refreshToken, client_id: config.clientId, redirect_uri: config.redirectUri }, config.extraTokenParameters);
      if (config.refreshWithScope)
        refreshRequest.scope = config.scope;
      return postTokenRequest(config.tokenEndpoint, refreshRequest, config.tokenRequestCredentials);
    };
    exports.fetchWithRefreshToken = fetchWithRefreshToken;
    function redirectToLogout(config, token, refresh_token, idToken, state, logoutHint, additionalParameters) {
      var _a;
      const params = new URLSearchParams(Object.assign(Object.assign({ token: refresh_token || token, token_type_hint: refresh_token ? "refresh_token" : "access_token", client_id: config.clientId, post_logout_redirect_uri: (_a = config.logoutRedirect) !== null && _a !== void 0 ? _a : config.redirectUri, ui_locales: window.navigator.languages.join(" ") }, config.extraLogoutParameters), additionalParameters));
      if (idToken)
        params.append("id_token_hint", idToken);
      if (state)
        params.append("state", state);
      if (logoutHint)
        params.append("logout_hint", logoutHint);
      window.location.assign(`${config.logoutEndpoint}?${params.toString()}`);
    }
    function validateState(urlParams, storageType) {
      const storage = storageType === "session" ? sessionStorage : localStorage;
      const receivedState = urlParams.get("state");
      const loadedState = storage.getItem(stateStorageKey);
      if (receivedState !== loadedState) {
        throw new Error('"state" value received from authentication server does no match client request. Possible cross-site request forgery');
      }
    }
  }
});

// node_modules/react-oauth2-code-pkce/dist/decodeJWT.js
var require_decodeJWT = __commonJS({
  "node_modules/react-oauth2-code-pkce/dist/decodeJWT.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeIdToken = exports.decodeAccessToken = exports.decodeJWT = void 0;
    var decodeJWT = (token) => {
      try {
        const base64Url = token.split(".")[1];
        const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
        const jsonPayload = decodeURIComponent(atob(base64).split("").map((c) => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`).join(""));
        return JSON.parse(jsonPayload);
      } catch (e) {
        console.error(e);
        throw Error("Failed to decode the access token.\n	Is it a proper JSON Web Token?\n	You can disable JWT decoding by setting the 'decodeToken' value to 'false' the configuration.");
      }
    };
    exports.decodeJWT = decodeJWT;
    var decodeAccessToken = (token) => {
      if (!token || !token.length)
        return void 0;
      try {
        return (0, exports.decodeJWT)(token);
      } catch (e) {
        console.warn(`Failed to decode access token: ${e.message}`);
      }
    };
    exports.decodeAccessToken = decodeAccessToken;
    var decodeIdToken = (idToken) => {
      if (!idToken || !idToken.length)
        return void 0;
      try {
        return (0, exports.decodeJWT)(idToken);
      } catch (e) {
        console.warn(`Failed to decode idToken: ${e.message}`);
      }
    };
    exports.decodeIdToken = decodeIdToken;
  }
});

// node_modules/react-oauth2-code-pkce/dist/timeUtils.js
var require_timeUtils = __commonJS({
  "node_modules/react-oauth2-code-pkce/dist/timeUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.epochAtSecondsFromNow = exports.FALLBACK_EXPIRE_TIME = void 0;
    exports.epochTimeIsPast = epochTimeIsPast;
    exports.getRefreshExpiresIn = getRefreshExpiresIn;
    exports.FALLBACK_EXPIRE_TIME = 600;
    var epochAtSecondsFromNow = (secondsFromNow) => Math.round(Date.now() / 1e3 + Number(secondsFromNow));
    exports.epochAtSecondsFromNow = epochAtSecondsFromNow;
    function epochTimeIsPast(timestamp) {
      const now = Math.round(Date.now()) / 1e3;
      const nowWithBuffer = now + 30;
      return nowWithBuffer >= timestamp;
    }
    var refreshExpireKeys = [
      "refresh_expires_in",
      // KeyCloak
      "refresh_token_expires_in"
      // Azure AD
    ];
    function getRefreshExpiresIn(tokenExpiresIn, response) {
      for (const key of refreshExpireKeys) {
        if (key in response)
          return response[key];
      }
      if (response.refresh_token)
        return tokenExpiresIn + exports.FALLBACK_EXPIRE_TIME;
      return tokenExpiresIn;
    }
  }
});

// node_modules/react-oauth2-code-pkce/dist/AuthContext.js
var require_AuthContext = __commonJS({
  "node_modules/react-oauth2-code-pkce/dist/AuthContext.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    }));
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? (function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ (function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    })();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuthProvider = exports.AuthContext = void 0;
    var react_1 = __importStar(require_react());
    var Hooks_1 = __importDefault(require_Hooks());
    var authConfig_1 = require_authConfig();
    var authentication_1 = require_authentication();
    var decodeJWT_1 = require_decodeJWT();
    var errors_1 = require_errors();
    var timeUtils_1 = require_timeUtils();
    exports.AuthContext = (0, react_1.createContext)({
      token: "",
      login: () => null,
      logIn: () => null,
      logOut: () => null,
      error: null,
      loginInProgress: false
    });
    var AuthProvider = ({ authConfig, children }) => {
      const config = (0, react_1.useMemo)(() => (0, authConfig_1.createInternalConfig)(authConfig), [authConfig]);
      const [refreshToken, setRefreshToken] = (0, Hooks_1.default)(`${config.storageKeyPrefix}refreshToken`, void 0, config.storage);
      const [refreshTokenExpire, setRefreshTokenExpire] = (0, Hooks_1.default)(`${config.storageKeyPrefix}refreshTokenExpire`, void 0, config.storage);
      const [token, setToken] = (0, Hooks_1.default)(`${config.storageKeyPrefix}token`, "", config.storage);
      const [tokenExpire, setTokenExpire] = (0, Hooks_1.default)(`${config.storageKeyPrefix}tokenExpire`, (0, timeUtils_1.epochAtSecondsFromNow)(timeUtils_1.FALLBACK_EXPIRE_TIME), config.storage);
      const [idToken, setIdToken] = (0, Hooks_1.default)(`${config.storageKeyPrefix}idToken`, void 0, config.storage);
      const [loginInProgress, setLoginInProgress] = (0, Hooks_1.default)(`${config.storageKeyPrefix}loginInProgress`, false, config.storage);
      const [refreshInProgress, setRefreshInProgress] = (0, Hooks_1.default)(`${config.storageKeyPrefix}refreshInProgress`, false, config.storage);
      const [loginMethod, setLoginMethod] = (0, Hooks_1.default)(`${config.storageKeyPrefix}loginMethod`, "redirect", config.storage);
      const tokenData = (0, react_1.useMemo)(() => {
        if (config.decodeToken)
          return (0, decodeJWT_1.decodeAccessToken)(token);
      }, [token]);
      const idTokenData = (0, react_1.useMemo)(() => (0, decodeJWT_1.decodeIdToken)(idToken), [idToken]);
      const [error, setError] = (0, react_1.useState)(null);
      function clearStorage() {
        setRefreshToken(void 0);
        setToken("");
        setTokenExpire((0, timeUtils_1.epochAtSecondsFromNow)(timeUtils_1.FALLBACK_EXPIRE_TIME));
        setRefreshTokenExpire(void 0);
        setIdToken(void 0);
        setLoginInProgress(false);
      }
      function logOut(state, logoutHint, additionalParameters) {
        clearStorage();
        setError(null);
        if ((config === null || config === void 0 ? void 0 : config.logoutEndpoint) && token)
          (0, authentication_1.redirectToLogout)(config, token, refreshToken, idToken, state, logoutHint, additionalParameters);
      }
      function logIn(state, additionalParameters, method = "redirect") {
        clearStorage();
        setLoginInProgress(true);
        setLoginMethod(method);
        let typeSafePassedState = state;
        if (state && typeof state !== "string") {
          const jsonState = JSON.stringify(state);
          console.warn(`Passed login state must be of type 'string'. Received '${jsonState}'. Ignoring value. In a future version, an error will be thrown here.`);
          typeSafePassedState = void 0;
        }
        (0, authentication_1.redirectToLogin)(config, typeSafePassedState, additionalParameters, method).catch((error2) => {
          console.error(error2);
          setError(error2.message);
          setLoginInProgress(false);
        });
      }
      function handleTokenResponse(response) {
        var _a, _b, _c;
        setToken(response.access_token);
        if (response.id_token) {
          setIdToken(response.id_token);
        }
        let tokenExp = timeUtils_1.FALLBACK_EXPIRE_TIME;
        try {
          if (response.id_token) {
            const decodedToken = (0, decodeJWT_1.decodeJWT)(response.id_token);
            tokenExp = Math.round(Number(decodedToken.exp) - Date.now() / 1e3);
          }
        } catch (e) {
          console.warn(`Failed to decode idToken: ${e.message}`);
        }
        const tokenExpiresIn = (_b = (_a = config.tokenExpiresIn) !== null && _a !== void 0 ? _a : response.expires_in) !== null && _b !== void 0 ? _b : tokenExp;
        setTokenExpire((0, timeUtils_1.epochAtSecondsFromNow)(tokenExpiresIn));
        const refreshTokenExpiresIn = (_c = config.refreshTokenExpiresIn) !== null && _c !== void 0 ? _c : (0, timeUtils_1.getRefreshExpiresIn)(tokenExpiresIn, response);
        if (response.refresh_token) {
          setRefreshToken(response.refresh_token);
          if (!refreshTokenExpire || config.refreshTokenExpiryStrategy !== "absolute") {
            setRefreshTokenExpire((0, timeUtils_1.epochAtSecondsFromNow)(refreshTokenExpiresIn));
          }
        }
        setError(null);
      }
      function handleExpiredRefreshToken(initial = false) {
        if (config.autoLogin && initial)
          return logIn(void 0, void 0, config.loginMethod);
        if (!config.onRefreshTokenExpire)
          return logIn(void 0, void 0, config.loginMethod);
        config.onRefreshTokenExpire({
          login: logIn,
          logIn
        });
      }
      function refreshAccessToken(initial = false) {
        if (!token)
          return;
        if (!(0, timeUtils_1.epochTimeIsPast)(tokenExpire))
          return;
        if (refreshInProgress && !initial)
          return;
        if (!refreshToken)
          return handleExpiredRefreshToken(initial);
        if (refreshTokenExpire && (0, timeUtils_1.epochTimeIsPast)(refreshTokenExpire))
          return handleExpiredRefreshToken(initial);
        if (refreshToken) {
          setRefreshInProgress(true);
          (0, authentication_1.fetchWithRefreshToken)({ config, refreshToken }).then((result) => handleTokenResponse(result)).catch((error2) => {
            if (error2 instanceof errors_1.FetchError) {
              if (error2.status === 400) {
                handleExpiredRefreshToken(initial);
                return;
              }
              console.error(error2);
              setError(error2.message);
              if (initial)
                logIn(void 0, void 0, config.loginMethod);
            } else if (error2 instanceof Error) {
              console.error(error2);
              setError(error2.message);
              if (initial)
                logIn(void 0, void 0, config.loginMethod);
            }
          }).finally(() => {
            setRefreshInProgress(false);
          });
          return;
        }
        console.warn("Failed to refresh access_token. Most likely there is no refresh_token, or the authentication server did not reply with an explicit expire time, and the default expire times are longer than the actual tokens expire time");
      }
      (0, react_1.useEffect)(() => {
        const randomStagger = 1e4 * Math.random();
        const interval = setInterval(() => refreshAccessToken(), 5e3 + randomStagger);
        return () => clearInterval(interval);
      }, [token, refreshToken, refreshTokenExpire, tokenExpire, refreshInProgress]);
      const didFetchTokens = (0, react_1.useRef)(false);
      (0, react_1.useEffect)(() => {
        if (loginInProgress) {
          const urlParams = new URLSearchParams(window.location.search);
          if (!urlParams.get("code")) {
            const error_description = urlParams.get("error_description") || "Bad authorization state. Refreshing the page and log in again might solve the issue.";
            console.error(`${error_description}
Expected  to find a '?code=' parameter in the URL by now. Did the authentication get aborted or interrupted?`);
            setError(error_description);
            clearStorage();
            return;
          }
          if (!didFetchTokens.current) {
            didFetchTokens.current = true;
            try {
              (0, authentication_1.validateState)(urlParams, config.storage);
            } catch (e) {
              console.error(e);
              setError(e.message);
            }
            (0, authentication_1.fetchTokens)(config).then((tokens) => {
              handleTokenResponse(tokens);
              if (config === null || config === void 0 ? void 0 : config.postLogin)
                config.postLogin();
              if (loginMethod === "popup")
                window.close();
            }).catch((error2) => {
              console.error(error2);
              setError(error2.message);
            }).finally(() => {
              if (config.clearURL) {
                window.history.replaceState(null, "", `${window.location.pathname}${window.location.hash}`);
              }
              setLoginInProgress(false);
            });
          }
          return;
        }
        if (!token && config.autoLogin)
          return logIn(void 0, void 0, config.loginMethod);
        refreshAccessToken(true);
      }, []);
      return react_1.default.createElement(exports.AuthContext.Provider, { value: {
        token,
        tokenData,
        idToken,
        idTokenData,
        login: logIn,
        logIn,
        logOut,
        error,
        loginInProgress
      } }, children);
    };
    exports.AuthProvider = AuthProvider;
  }
});

// node_modules/react-oauth2-code-pkce/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-oauth2-code-pkce/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuthContext = exports.AuthProvider = void 0;
    var AuthContext_1 = require_AuthContext();
    Object.defineProperty(exports, "AuthProvider", { enumerable: true, get: function() {
      return AuthContext_1.AuthProvider;
    } });
    Object.defineProperty(exports, "AuthContext", { enumerable: true, get: function() {
      return AuthContext_1.AuthContext;
    } });
  }
});
export default require_dist();
//# sourceMappingURL=react-oauth2-code-pkce.js.map
